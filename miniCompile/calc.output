

Terminals which are not used:

   TOK_EXIT


Conflict in state 33 between rule 14 and token TOK_ADD resolved as reduce.
Conflict in state 33 between rule 14 and token TOK_SUB resolved as reduce.
Conflict in state 33 between rule 14 and token TOK_MUL resolved as shift.
Conflict in state 33 between rule 14 and token TOK_DIV resolved as shift.
Conflict in state 34 between rule 16 and token TOK_ADD resolved as reduce.
Conflict in state 34 between rule 16 and token TOK_SUB resolved as reduce.
Conflict in state 34 between rule 16 and token TOK_MUL resolved as shift.
Conflict in state 34 between rule 16 and token TOK_DIV resolved as shift.
Conflict in state 35 between rule 17 and token TOK_ADD resolved as reduce.
Conflict in state 35 between rule 17 and token TOK_SUB resolved as reduce.
Conflict in state 35 between rule 17 and token TOK_MUL resolved as reduce.
Conflict in state 35 between rule 17 and token TOK_DIV resolved as reduce.
Conflict in state 36 between rule 15 and token TOK_ADD resolved as reduce.
Conflict in state 36 between rule 15 and token TOK_SUB resolved as reduce.
Conflict in state 36 between rule 15 and token TOK_MUL resolved as reduce.
Conflict in state 36 between rule 15 and token TOK_DIV resolved as reduce.

Grammar
rule 1    prog -> TOK_MAIN TOK_OPENCURLY vardefs stmts TOK_CLOSECURLY
rule 2    prog ->		/* empty */
rule 3    vardefs ->		/* empty */
rule 4    vardefs -> vardef TOK_SEMICOLON vardefs
rule 5    vardef -> TOK_INT TOK_IDENT
rule 6    vardef -> TOK_INT TOK_IDENT_ERR
rule 7    vardef -> TOK_FLOAT TOK_IDENT
rule 8    vardef -> TOK_FLOAT TOK_IDENT_ERR
rule 9    stmts ->		/* empty */
rule 10   stmts -> stmt TOK_SEMICOLON stmts
rule 11   stmt -> TOK_IDENT TOK_EQ expr
rule 12   stmt -> TOK_PRINTID TOK_IDENT
rule 13   stmt -> TOK_PRINTEX expr
rule 14   expr -> expr TOK_ADD expr
rule 15   expr -> expr TOK_DIV expr
rule 16   expr -> expr TOK_SUB expr
rule 17   expr -> expr TOK_MUL expr
rule 18   expr -> TOK_IDENT
rule 19   expr -> RAW
rule 20   RAW -> TOK_NUM
rule 21   RAW -> TOK_FNUM

Terminals, with rules where they appear

$ (-1)
error (256)
TOK_SEMICOLON (257) 4 10
TOK_ADD (258) 14
TOK_SUB (259) 16
TOK_MUL (260) 17
TOK_DIV (261) 15
TOK_EQ (262) 11
TOK_INT (263) 5 6
TOK_FLOAT (264) 7 8
TOK_IDENT (265) 5 7 11 12 18
TOK_PRINTID (266) 12
TOK_PRINTEX (267) 13
TOK_EXIT (268)
TOK_MAIN (269) 1
TOK_OPENCURLY (270) 1
TOK_CLOSECURLY (271) 1
TOK_IDENT_ERR (272) 6 8
TOK_NUM (273) 20
TOK_FNUM (274) 21

Nonterminals, with rules where they appear

prog (21)
    on left: 1 2
vardefs (22)
    on left: 3 4, on right: 1 4
vardef (23)
    on left: 5 6 7 8, on right: 4
stmts (24)
    on left: 9 10, on right: 1 10
stmt (25)
    on left: 11 12 13, on right: 10
expr (26)
    on left: 14 15 16 17 18 19, on right: 11 13 14 15 16 17
RAW (27)
    on left: 20 21, on right: 19


state 0

    TOK_MAIN	shift, and go to state 1

    $default	reduce using rule 2 (prog)

    prog	go to state 37



state 1

    prog  ->  TOK_MAIN . TOK_OPENCURLY vardefs stmts TOK_CLOSECURLY   (rule 1)

    TOK_OPENCURLY	shift, and go to state 2



state 2

    prog  ->  TOK_MAIN TOK_OPENCURLY . vardefs stmts TOK_CLOSECURLY   (rule 1)

    TOK_INT	shift, and go to state 3
    TOK_FLOAT	shift, and go to state 4

    $default	reduce using rule 3 (vardefs)

    vardefs	go to state 5
    vardef	go to state 6



state 3

    vardef  ->  TOK_INT . TOK_IDENT   (rule 5)
    vardef  ->  TOK_INT . TOK_IDENT_ERR   (rule 6)

    TOK_IDENT	shift, and go to state 7
    TOK_IDENT_ERR	shift, and go to state 8



state 4

    vardef  ->  TOK_FLOAT . TOK_IDENT   (rule 7)
    vardef  ->  TOK_FLOAT . TOK_IDENT_ERR   (rule 8)

    TOK_IDENT	shift, and go to state 9
    TOK_IDENT_ERR	shift, and go to state 10



state 5

    prog  ->  TOK_MAIN TOK_OPENCURLY vardefs . stmts TOK_CLOSECURLY   (rule 1)

    TOK_IDENT	shift, and go to state 11
    TOK_PRINTID	shift, and go to state 12
    TOK_PRINTEX	shift, and go to state 13

    $default	reduce using rule 9 (stmts)

    stmts	go to state 14
    stmt	go to state 15



state 6

    vardefs  ->  vardef . TOK_SEMICOLON vardefs   (rule 4)

    TOK_SEMICOLON	shift, and go to state 16



state 7

    vardef  ->  TOK_INT TOK_IDENT .   (rule 5)

    $default	reduce using rule 5 (vardef)



state 8

    vardef  ->  TOK_INT TOK_IDENT_ERR .   (rule 6)

    $default	reduce using rule 6 (vardef)



state 9

    vardef  ->  TOK_FLOAT TOK_IDENT .   (rule 7)

    $default	reduce using rule 7 (vardef)



state 10

    vardef  ->  TOK_FLOAT TOK_IDENT_ERR .   (rule 8)

    $default	reduce using rule 8 (vardef)



state 11

    stmt  ->  TOK_IDENT . TOK_EQ expr   (rule 11)

    TOK_EQ	shift, and go to state 17



state 12

    stmt  ->  TOK_PRINTID . TOK_IDENT   (rule 12)

    TOK_IDENT	shift, and go to state 18



state 13

    stmt  ->  TOK_PRINTEX . expr   (rule 13)

    TOK_IDENT	shift, and go to state 19
    TOK_NUM	shift, and go to state 20
    TOK_FNUM	shift, and go to state 21

    expr	go to state 22
    RAW 	go to state 23



state 14

    prog  ->  TOK_MAIN TOK_OPENCURLY vardefs stmts . TOK_CLOSECURLY   (rule 1)

    TOK_CLOSECURLY	shift, and go to state 24



state 15

    stmts  ->  stmt . TOK_SEMICOLON stmts   (rule 10)

    TOK_SEMICOLON	shift, and go to state 25



state 16

    vardefs  ->  vardef TOK_SEMICOLON . vardefs   (rule 4)

    TOK_INT	shift, and go to state 3
    TOK_FLOAT	shift, and go to state 4

    $default	reduce using rule 3 (vardefs)

    vardefs	go to state 26
    vardef	go to state 6



state 17

    stmt  ->  TOK_IDENT TOK_EQ . expr   (rule 11)

    TOK_IDENT	shift, and go to state 19
    TOK_NUM	shift, and go to state 20
    TOK_FNUM	shift, and go to state 21

    expr	go to state 27
    RAW 	go to state 23



state 18

    stmt  ->  TOK_PRINTID TOK_IDENT .   (rule 12)

    $default	reduce using rule 12 (stmt)



state 19

    expr  ->  TOK_IDENT .   (rule 18)

    $default	reduce using rule 18 (expr)



state 20

    RAW  ->  TOK_NUM .   (rule 20)

    $default	reduce using rule 20 (RAW)



state 21

    RAW  ->  TOK_FNUM .   (rule 21)

    $default	reduce using rule 21 (RAW)



state 22

    stmt  ->  TOK_PRINTEX expr .   (rule 13)
    expr  ->  expr . TOK_ADD expr   (rule 14)
    expr  ->  expr . TOK_DIV expr   (rule 15)
    expr  ->  expr . TOK_SUB expr   (rule 16)
    expr  ->  expr . TOK_MUL expr   (rule 17)

    TOK_ADD	shift, and go to state 28
    TOK_SUB	shift, and go to state 29
    TOK_MUL	shift, and go to state 30
    TOK_DIV	shift, and go to state 31

    $default	reduce using rule 13 (stmt)



state 23

    expr  ->  RAW .   (rule 19)

    $default	reduce using rule 19 (expr)



state 24

    prog  ->  TOK_MAIN TOK_OPENCURLY vardefs stmts TOK_CLOSECURLY .   (rule 1)

    $default	reduce using rule 1 (prog)



state 25

    stmts  ->  stmt TOK_SEMICOLON . stmts   (rule 10)

    TOK_IDENT	shift, and go to state 11
    TOK_PRINTID	shift, and go to state 12
    TOK_PRINTEX	shift, and go to state 13

    $default	reduce using rule 9 (stmts)

    stmts	go to state 32
    stmt	go to state 15



state 26

    vardefs  ->  vardef TOK_SEMICOLON vardefs .   (rule 4)

    $default	reduce using rule 4 (vardefs)



state 27

    stmt  ->  TOK_IDENT TOK_EQ expr .   (rule 11)
    expr  ->  expr . TOK_ADD expr   (rule 14)
    expr  ->  expr . TOK_DIV expr   (rule 15)
    expr  ->  expr . TOK_SUB expr   (rule 16)
    expr  ->  expr . TOK_MUL expr   (rule 17)

    TOK_ADD	shift, and go to state 28
    TOK_SUB	shift, and go to state 29
    TOK_MUL	shift, and go to state 30
    TOK_DIV	shift, and go to state 31

    $default	reduce using rule 11 (stmt)



state 28

    expr  ->  expr TOK_ADD . expr   (rule 14)

    TOK_IDENT	shift, and go to state 19
    TOK_NUM	shift, and go to state 20
    TOK_FNUM	shift, and go to state 21

    expr	go to state 33
    RAW 	go to state 23



state 29

    expr  ->  expr TOK_SUB . expr   (rule 16)

    TOK_IDENT	shift, and go to state 19
    TOK_NUM	shift, and go to state 20
    TOK_FNUM	shift, and go to state 21

    expr	go to state 34
    RAW 	go to state 23



state 30

    expr  ->  expr TOK_MUL . expr   (rule 17)

    TOK_IDENT	shift, and go to state 19
    TOK_NUM	shift, and go to state 20
    TOK_FNUM	shift, and go to state 21

    expr	go to state 35
    RAW 	go to state 23



state 31

    expr  ->  expr TOK_DIV . expr   (rule 15)

    TOK_IDENT	shift, and go to state 19
    TOK_NUM	shift, and go to state 20
    TOK_FNUM	shift, and go to state 21

    expr	go to state 36
    RAW 	go to state 23



state 32

    stmts  ->  stmt TOK_SEMICOLON stmts .   (rule 10)

    $default	reduce using rule 10 (stmts)



state 33

    expr  ->  expr . TOK_ADD expr   (rule 14)
    expr  ->  expr TOK_ADD expr .   (rule 14)
    expr  ->  expr . TOK_DIV expr   (rule 15)
    expr  ->  expr . TOK_SUB expr   (rule 16)
    expr  ->  expr . TOK_MUL expr   (rule 17)

    TOK_MUL	shift, and go to state 30
    TOK_DIV	shift, and go to state 31

    $default	reduce using rule 14 (expr)



state 34

    expr  ->  expr . TOK_ADD expr   (rule 14)
    expr  ->  expr . TOK_DIV expr   (rule 15)
    expr  ->  expr . TOK_SUB expr   (rule 16)
    expr  ->  expr TOK_SUB expr .   (rule 16)
    expr  ->  expr . TOK_MUL expr   (rule 17)

    TOK_MUL	shift, and go to state 30
    TOK_DIV	shift, and go to state 31

    $default	reduce using rule 16 (expr)



state 35

    expr  ->  expr . TOK_ADD expr   (rule 14)
    expr  ->  expr . TOK_DIV expr   (rule 15)
    expr  ->  expr . TOK_SUB expr   (rule 16)
    expr  ->  expr . TOK_MUL expr   (rule 17)
    expr  ->  expr TOK_MUL expr .   (rule 17)


    $default	reduce using rule 17 (expr)



state 36

    expr  ->  expr . TOK_ADD expr   (rule 14)
    expr  ->  expr . TOK_DIV expr   (rule 15)
    expr  ->  expr TOK_DIV expr .   (rule 15)
    expr  ->  expr . TOK_SUB expr   (rule 16)
    expr  ->  expr . TOK_MUL expr   (rule 17)


    $default	reduce using rule 15 (expr)



state 37

    $   	go to state 38



state 38

    $   	go to state 39



state 39

    $default	accept
